// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: counter.query.sql

package database

import (
	"context"
	"database/sql"
)

const createCounter = `-- name: CreateCounter :exec
INSERT INTO counters (counter_name, counter_number, created_at, updated_at)
VALUES (?, 1, ?, ?) RETURNING counter_id
`

type CreateCounterParams struct {
	CounterName string        `json:"counter_name"`
	CreatedAt   sql.NullInt64 `json:"created_at"`
	UpdatedAt   sql.NullInt64 `json:"updated_at"`
}

func (q *Queries) CreateCounter(ctx context.Context, arg CreateCounterParams) error {
	_, err := q.db.ExecContext(ctx, createCounter, arg.CounterName, arg.CreatedAt, arg.UpdatedAt)
	return err
}

const getCounter = `-- name: GetCounter :one
SELECT counter_number, updated_at
FROM counters
WHERE counter_name = ?
`

type GetCounterRow struct {
	CounterNumber int64         `json:"counter_number"`
	UpdatedAt     sql.NullInt64 `json:"updated_at"`
}

func (q *Queries) GetCounter(ctx context.Context, counterName string) (GetCounterRow, error) {
	row := q.db.QueryRowContext(ctx, getCounter, counterName)
	var i GetCounterRow
	err := row.Scan(&i.CounterNumber, &i.UpdatedAt)
	return i, err
}

const updateCounter = `-- name: UpdateCounter :exec
UPDATE counters
SET counter_number = ?,
    updated_at = ?
WHERE counter_name = ?
`

type UpdateCounterParams struct {
	CounterNumber int64         `json:"counter_number"`
	UpdatedAt     sql.NullInt64 `json:"updated_at"`
	CounterName   string        `json:"counter_name"`
}

func (q *Queries) UpdateCounter(ctx context.Context, arg UpdateCounterParams) error {
	_, err := q.db.ExecContext(ctx, updateCounter, arg.CounterNumber, arg.UpdatedAt, arg.CounterName)
	return err
}
