// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.quey.sql

package database

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (category_name, category_description, category_status, category_properties) VALUES (?, ?, ?, ?)
`

type CreateCategoryParams struct {
	CategoryName        string         `json:"category_name"`
	CategoryDescription sql.NullString `json:"category_description"`
	CategoryStatus      int64          `json:"category_status"`
	CategoryProperties  sql.NullString `json:"category_properties"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory,
		arg.CategoryName,
		arg.CategoryDescription,
		arg.CategoryStatus,
		arg.CategoryProperties,
	)
	return err
}

const deleteCategoryByID = `-- name: DeleteCategoryByID :exec
UPDATE categories
SET deleted_at = ?,
    category_status = 2,
    updated_at = ?
WHERE category_id = ?
`

type DeleteCategoryByIDParams struct {
	DeletedAt  sql.NullInt64 `json:"deleted_at"`
	UpdatedAt  sql.NullInt64 `json:"updated_at"`
	CategoryID int64         `json:"category_id"`
}

func (q *Queries) DeleteCategoryByID(ctx context.Context, arg DeleteCategoryByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategoryByID, arg.DeletedAt, arg.UpdatedAt, arg.CategoryID)
	return err
}

const forceDeleteCategoryByID = `-- name: ForceDeleteCategoryByID :exec
DELETE FROM categories
WHERE category_id = ? OR category_name = ?
`

type ForceDeleteCategoryByIDParams struct {
	CategoryID   int64  `json:"category_id"`
	CategoryName string `json:"category_name"`
}

func (q *Queries) ForceDeleteCategoryByID(ctx context.Context, arg ForceDeleteCategoryByIDParams) error {
	_, err := q.db.ExecContext(ctx, forceDeleteCategoryByID, arg.CategoryID, arg.CategoryName)
	return err
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT category_id, category_name, category_description, category_status, category_properties
FROM categories
WHERE category_id = ?
`

type GetCategoryByIDRow struct {
	CategoryID          int64          `json:"category_id"`
	CategoryName        string         `json:"category_name"`
	CategoryDescription sql.NullString `json:"category_description"`
	CategoryStatus      int64          `json:"category_status"`
	CategoryProperties  sql.NullString `json:"category_properties"`
}

func (q *Queries) GetCategoryByID(ctx context.Context, categoryID int64) (GetCategoryByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, categoryID)
	var i GetCategoryByIDRow
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.CategoryDescription,
		&i.CategoryStatus,
		&i.CategoryProperties,
	)
	return i, err
}

const getListCategories = `-- name: GetListCategories :many
SELECT category_id, category_name, category_description, category_status, category_properties
FROM categories
WHERE category_name LIKE ? OR category_status = ? OR (created_at >= ? AND created_at <= ?) OR (deleted_at >= ? AND deleted_at <= ?)
ORDER BY ?
LIMIT ? OFFSET ?
`

type GetListCategoriesParams struct {
	CategoryName   string        `json:"category_name"`
	CategoryStatus int64         `json:"category_status"`
	CreatedAt      sql.NullInt64 `json:"created_at"`
	CreatedAt_2    sql.NullInt64 `json:"created_at_2"`
	DeletedAt      sql.NullInt64 `json:"deleted_at"`
	DeletedAt_2    sql.NullInt64 `json:"deleted_at_2"`
	Limit          int64         `json:"limit"`
	Offset         int64         `json:"offset"`
}

type GetListCategoriesRow struct {
	CategoryID          int64          `json:"category_id"`
	CategoryName        string         `json:"category_name"`
	CategoryDescription sql.NullString `json:"category_description"`
	CategoryStatus      int64          `json:"category_status"`
	CategoryProperties  sql.NullString `json:"category_properties"`
}

func (q *Queries) GetListCategories(ctx context.Context, arg GetListCategoriesParams) ([]GetListCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCategories,
		arg.CategoryName,
		arg.CategoryStatus,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.DeletedAt,
		arg.DeletedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCategoriesRow
	for rows.Next() {
		var i GetListCategoriesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.CategoryDescription,
			&i.CategoryStatus,
			&i.CategoryProperties,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreCategoryByID = `-- name: RestoreCategoryByID :exec
UPDATE categories
SET deleted_at = 0,
    category_status = 0,
    updated_at = ?
WHERE category_id = ?
`

type RestoreCategoryByIDParams struct {
	UpdatedAt  sql.NullInt64 `json:"updated_at"`
	CategoryID int64         `json:"category_id"`
}

func (q *Queries) RestoreCategoryByID(ctx context.Context, arg RestoreCategoryByIDParams) error {
	_, err := q.db.ExecContext(ctx, restoreCategoryByID, arg.UpdatedAt, arg.CategoryID)
	return err
}

const updateCategoryByID = `-- name: UpdateCategoryByID :exec
UPDATE categories
SET category_name = ?,
    category_description = ?,
    category_status = ?,
    category_properties = ?,
    updated_at = ?
WHERE category_id = ?
`

type UpdateCategoryByIDParams struct {
	CategoryName        string         `json:"category_name"`
	CategoryDescription sql.NullString `json:"category_description"`
	CategoryStatus      int64          `json:"category_status"`
	CategoryProperties  sql.NullString `json:"category_properties"`
	UpdatedAt           sql.NullInt64  `json:"updated_at"`
	CategoryID          int64          `json:"category_id"`
}

func (q *Queries) UpdateCategoryByID(ctx context.Context, arg UpdateCategoryByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCategoryByID,
		arg.CategoryName,
		arg.CategoryDescription,
		arg.CategoryStatus,
		arg.CategoryProperties,
		arg.UpdatedAt,
		arg.CategoryID,
	)
	return err
}

const updateCategoryStatusByID = `-- name: UpdateCategoryStatusByID :exec
UPDATE categories
SET category_status = ?,
    updated_at = ?
WHERE category_id = ?
`

type UpdateCategoryStatusByIDParams struct {
	CategoryStatus int64         `json:"category_status"`
	UpdatedAt      sql.NullInt64 `json:"updated_at"`
	CategoryID     int64         `json:"category_id"`
}

func (q *Queries) UpdateCategoryStatusByID(ctx context.Context, arg UpdateCategoryStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCategoryStatusByID, arg.CategoryStatus, arg.UpdatedAt, arg.CategoryID)
	return err
}
