// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.query.sql

package database

import (
	"context"
	"strings"
)

const checkUserExist = `-- name: CheckUserExist :one
SELECT COUNT(user_id) FROM users WHERE user_name = ? OR user_phone = ?
`

type CheckUserExistParams struct {
	UserName  string `json:"user_name"`
	UserPhone string `json:"user_phone"`
}

func (q *Queries) CheckUserExist(ctx context.Context, arg CheckUserExistParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserExist, arg.UserName, arg.UserPhone)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_display_name, user_name, user_phone, user_password, user_status, user_avatar, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING user_id
`

type CreateUserParams struct {
	UserDisplayName string `json:"user_display_name"`
	UserName        string `json:"user_name"`
	UserPhone       string `json:"user_phone"`
	UserPassword    string `json:"user_password"`
	UserStatus      int64  `json:"user_status"`
	UserAvatar      string `json:"user_avatar"`
	CreatedAt       int64  `json:"created_at"`
	UpdatedAt       int64  `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserDisplayName,
		arg.UserName,
		arg.UserPhone,
		arg.UserPassword,
		arg.UserStatus,
		arg.UserAvatar,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
UPDATE users
SET deleted_at = ?,
    user_status = 2,
    updated_at = ?
WHERE user_id = ?
`

type DeleteUserByIDParams struct {
	DeletedAt int64 `json:"deleted_at"`
	UpdatedAt int64 `json:"updated_at"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) DeleteUserByID(ctx context.Context, arg DeleteUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, arg.DeletedAt, arg.UpdatedAt, arg.UserID)
	return err
}

const deleteUserByPhone = `-- name: DeleteUserByPhone :exec
UPDATE users
SET deleted_at = ?,
    user_status = 2,
    updated_at = ?
WHERE user_phone = ?
`

type DeleteUserByPhoneParams struct {
	DeletedAt int64  `json:"deleted_at"`
	UpdatedAt int64  `json:"updated_at"`
	UserPhone string `json:"user_phone"`
}

func (q *Queries) DeleteUserByPhone(ctx context.Context, arg DeleteUserByPhoneParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserByPhone, arg.DeletedAt, arg.UpdatedAt, arg.UserPhone)
	return err
}

const forceDeleteUserByID = `-- name: ForceDeleteUserByID :exec
DELETE FROM users WHERE user_id = ?
`

func (q *Queries) ForceDeleteUserByID(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, forceDeleteUserByID, userID)
	return err
}

const getListUserByFilter = `-- name: GetListUserByFilter :many
SELECT user_id, user_display_name, user_phone, user_avatar, user_status, user_role_id, created_at, updated_at, deleted_at FROM users 
WHERE user_display_name LIKE ? 
OR user_name LIKE ?
OR user_phone LIKE ? 
OR user_status IN (/*SLICE:user_status_ids*/?) 
OR user_role_id IN (/*SLICE:user_role_ids*/?) 
OR (created_at >= ? AND created_at <= ?) 
OR (deleted_at >= ? AND deleted_at <= ?)
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetListUserByFilterParams struct {
	UserDisplayName string  `json:"user_display_name"`
	UserName        string  `json:"user_name"`
	UserPhone       string  `json:"user_phone"`
	UserStatusIds   []int64 `json:"user_status_ids"`
	UserRoleIds     []int64 `json:"user_role_ids"`
	CreatedAt       int64   `json:"created_at"`
	CreatedAt_2     int64   `json:"created_at_2"`
	DeletedAt       int64   `json:"deleted_at"`
	DeletedAt_2     int64   `json:"deleted_at_2"`
	Limit           int64   `json:"limit"`
	Offset          int64   `json:"offset"`
}

type GetListUserByFilterRow struct {
	UserID          int64  `json:"user_id"`
	UserDisplayName string `json:"user_display_name"`
	UserPhone       string `json:"user_phone"`
	UserAvatar      string `json:"user_avatar"`
	UserStatus      int64  `json:"user_status"`
	UserRoleID      int64  `json:"user_role_id"`
	CreatedAt       int64  `json:"created_at"`
	UpdatedAt       int64  `json:"updated_at"`
	DeletedAt       int64  `json:"deleted_at"`
}

func (q *Queries) GetListUserByFilter(ctx context.Context, arg GetListUserByFilterParams) ([]GetListUserByFilterRow, error) {
	query := getListUserByFilter
	var queryParams []interface{}
	queryParams = append(queryParams, arg.UserDisplayName)
	queryParams = append(queryParams, arg.UserName)
	queryParams = append(queryParams, arg.UserPhone)
	if len(arg.UserStatusIds) > 0 {
		for _, v := range arg.UserStatusIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:user_status_ids*/?", strings.Repeat(",?", len(arg.UserStatusIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:user_status_ids*/?", "NULL", 1)
	}
	if len(arg.UserRoleIds) > 0 {
		for _, v := range arg.UserRoleIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:user_role_ids*/?", strings.Repeat(",?", len(arg.UserRoleIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:user_role_ids*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.CreatedAt)
	queryParams = append(queryParams, arg.CreatedAt_2)
	queryParams = append(queryParams, arg.DeletedAt)
	queryParams = append(queryParams, arg.DeletedAt_2)
	queryParams = append(queryParams, arg.Limit)
	queryParams = append(queryParams, arg.Offset)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListUserByFilterRow
	for rows.Next() {
		var i GetListUserByFilterRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserDisplayName,
			&i.UserPhone,
			&i.UserAvatar,
			&i.UserStatus,
			&i.UserRoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListUserDeleted = `-- name: GetListUserDeleted :many
SELECT user_id, user_display_name, user_phone, user_status, user_avatar, user_role_id, created_at, updated_at, deleted_at FROM users WHERE user_status = 2
`

type GetListUserDeletedRow struct {
	UserID          int64  `json:"user_id"`
	UserDisplayName string `json:"user_display_name"`
	UserPhone       string `json:"user_phone"`
	UserStatus      int64  `json:"user_status"`
	UserAvatar      string `json:"user_avatar"`
	UserRoleID      int64  `json:"user_role_id"`
	CreatedAt       int64  `json:"created_at"`
	UpdatedAt       int64  `json:"updated_at"`
	DeletedAt       int64  `json:"deleted_at"`
}

func (q *Queries) GetListUserDeleted(ctx context.Context) ([]GetListUserDeletedRow, error) {
	rows, err := q.db.QueryContext(ctx, getListUserDeleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListUserDeletedRow
	for rows.Next() {
		var i GetListUserDeletedRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserDisplayName,
			&i.UserPhone,
			&i.UserStatus,
			&i.UserAvatar,
			&i.UserRoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListUsers = `-- name: GetListUsers :many
SELECT user_id, user_display_name, user_phone, user_status, user_avatar, user_role_id, created_at, updated_at, deleted_at FROM users
`

type GetListUsersRow struct {
	UserID          int64  `json:"user_id"`
	UserDisplayName string `json:"user_display_name"`
	UserPhone       string `json:"user_phone"`
	UserStatus      int64  `json:"user_status"`
	UserAvatar      string `json:"user_avatar"`
	UserRoleID      int64  `json:"user_role_id"`
	CreatedAt       int64  `json:"created_at"`
	UpdatedAt       int64  `json:"updated_at"`
	DeletedAt       int64  `json:"deleted_at"`
}

func (q *Queries) GetListUsers(ctx context.Context) ([]GetListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListUsersRow
	for rows.Next() {
		var i GetListUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserDisplayName,
			&i.UserPhone,
			&i.UserStatus,
			&i.UserAvatar,
			&i.UserRoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalUserByFilter = `-- name: GetTotalUserByFilter :one
SELECT COUNT(user_id) FROM users 
WHERE user_display_name LIKE ?
OR user_phone = ?
OR user_status = ?
OR (created_at >= ? AND created_at <= ?)
OR (deleted_at >= ? AND deleted_at <= ?)
`

type GetTotalUserByFilterParams struct {
	UserDisplayName string `json:"user_display_name"`
	UserPhone       string `json:"user_phone"`
	UserStatus      int64  `json:"user_status"`
	CreatedAt       int64  `json:"created_at"`
	CreatedAt_2     int64  `json:"created_at_2"`
	DeletedAt       int64  `json:"deleted_at"`
	DeletedAt_2     int64  `json:"deleted_at_2"`
}

func (q *Queries) GetTotalUserByFilter(ctx context.Context, arg GetTotalUserByFilterParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalUserByFilter,
		arg.UserDisplayName,
		arg.UserPhone,
		arg.UserStatus,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.DeletedAt,
		arg.DeletedAt_2,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, user_display_name,  user_phone, user_avatar, user_status, user_role_id, created_at, updated_at, deleted_at FROM users WHERE user_id = ? LIMIT 1
`

type GetUserByIDRow struct {
	UserID          int64  `json:"user_id"`
	UserDisplayName string `json:"user_display_name"`
	UserPhone       string `json:"user_phone"`
	UserAvatar      string `json:"user_avatar"`
	UserStatus      int64  `json:"user_status"`
	UserRoleID      int64  `json:"user_role_id"`
	CreatedAt       int64  `json:"created_at"`
	UpdatedAt       int64  `json:"updated_at"`
	DeletedAt       int64  `json:"deleted_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserDisplayName,
		&i.UserPhone,
		&i.UserAvatar,
		&i.UserStatus,
		&i.UserRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT user_id, user_display_name,  user_phone, user_avatar, user_status, user_role_id, created_at, updated_at, deleted_at FROM users WHERE user_phone = ? LIMIT 1
`

type GetUserByPhoneRow struct {
	UserID          int64  `json:"user_id"`
	UserDisplayName string `json:"user_display_name"`
	UserPhone       string `json:"user_phone"`
	UserAvatar      string `json:"user_avatar"`
	UserStatus      int64  `json:"user_status"`
	UserRoleID      int64  `json:"user_role_id"`
	CreatedAt       int64  `json:"created_at"`
	UpdatedAt       int64  `json:"updated_at"`
	DeletedAt       int64  `json:"deleted_at"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, userPhone string) (GetUserByPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, userPhone)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.UserID,
		&i.UserDisplayName,
		&i.UserPhone,
		&i.UserAvatar,
		&i.UserStatus,
		&i.UserRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT user_id, user_display_name, user_name, user_phone, user_password, user_status, user_role_id, created_at, updated_at, deleted_at FROM users WHERE user_id = ? OR user_name = ? OR user_Phone = ? LIMIT 1
`

type GetUserProfileParams struct {
	UserID    int64  `json:"user_id"`
	UserName  string `json:"user_name"`
	UserPhone string `json:"user_phone"`
}

type GetUserProfileRow struct {
	UserID          int64  `json:"user_id"`
	UserDisplayName string `json:"user_display_name"`
	UserName        string `json:"user_name"`
	UserPhone       string `json:"user_phone"`
	UserPassword    string `json:"user_password"`
	UserStatus      int64  `json:"user_status"`
	UserRoleID      int64  `json:"user_role_id"`
	CreatedAt       int64  `json:"created_at"`
	UpdatedAt       int64  `json:"updated_at"`
	DeletedAt       int64  `json:"deleted_at"`
}

func (q *Queries) GetUserProfile(ctx context.Context, arg GetUserProfileParams) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, arg.UserID, arg.UserName, arg.UserPhone)
	var i GetUserProfileRow
	err := row.Scan(
		&i.UserID,
		&i.UserDisplayName,
		&i.UserName,
		&i.UserPhone,
		&i.UserPassword,
		&i.UserStatus,
		&i.UserRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const restoreUserByID = `-- name: RestoreUserByID :exec
UPDATE users
SET deleted_at = 0,
    user_status = 0,
    updated_at = ?
WHERE user_id = ?
`

type RestoreUserByIDParams struct {
	UpdatedAt int64 `json:"updated_at"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) RestoreUserByID(ctx context.Context, arg RestoreUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, restoreUserByID, arg.UpdatedAt, arg.UserID)
	return err
}

const restoreUserByPhone = `-- name: RestoreUserByPhone :exec
UPDATE users
SET deleted_at = 0,
    user_status = 0,
    updated_at = ?
WHERE user_phone = ?
`

type RestoreUserByPhoneParams struct {
	UpdatedAt int64  `json:"updated_at"`
	UserPhone string `json:"user_phone"`
}

func (q *Queries) RestoreUserByPhone(ctx context.Context, arg RestoreUserByPhoneParams) error {
	_, err := q.db.ExecContext(ctx, restoreUserByPhone, arg.UpdatedAt, arg.UserPhone)
	return err
}

const updateUserAvatarByID = `-- name: UpdateUserAvatarByID :exec
UPDATE users
SET user_avatar = ?,
    updated_at = ?
WHERE user_id = ?
`

type UpdateUserAvatarByIDParams struct {
	UserAvatar string `json:"user_avatar"`
	UpdatedAt  int64  `json:"updated_at"`
	UserID     int64  `json:"user_id"`
}

func (q *Queries) UpdateUserAvatarByID(ctx context.Context, arg UpdateUserAvatarByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatarByID, arg.UserAvatar, arg.UpdatedAt, arg.UserID)
	return err
}

const updateUserByID = `-- name: UpdateUserByID :exec
UPDATE users
SET user_display_name = ?,
    user_phone = ?,
    user_status = ?,
    user_role_id = ?, 
    updated_at = ?
WHERE user_id = ?
`

type UpdateUserByIDParams struct {
	UserDisplayName string `json:"user_display_name"`
	UserPhone       string `json:"user_phone"`
	UserStatus      int64  `json:"user_status"`
	UserRoleID      int64  `json:"user_role_id"`
	UpdatedAt       int64  `json:"updated_at"`
	UserID          int64  `json:"user_id"`
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByID,
		arg.UserDisplayName,
		arg.UserPhone,
		arg.UserStatus,
		arg.UserRoleID,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}

const updateUserPasswordByID = `-- name: UpdateUserPasswordByID :exec
UPDATE users
SET user_password = ?,
    updated_at = ?
WHERE user_id = ?
`

type UpdateUserPasswordByIDParams struct {
	UserPassword string `json:"user_password"`
	UpdatedAt    int64  `json:"updated_at"`
	UserID       int64  `json:"user_id"`
}

func (q *Queries) UpdateUserPasswordByID(ctx context.Context, arg UpdateUserPasswordByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPasswordByID, arg.UserPassword, arg.UpdatedAt, arg.UserID)
	return err
}

const updateUserStatusByID = `-- name: UpdateUserStatusByID :exec
UPDATE users
SET user_status = ?,
    updated_at = ?
WHERE user_id = ?
`

type UpdateUserStatusByIDParams struct {
	UserStatus int64 `json:"user_status"`
	UpdatedAt  int64 `json:"updated_at"`
	UserID     int64 `json:"user_id"`
}

func (q *Queries) UpdateUserStatusByID(ctx context.Context, arg UpdateUserStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatusByID, arg.UserStatus, arg.UpdatedAt, arg.UserID)
	return err
}
