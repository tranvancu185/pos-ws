// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.query.sql

package database

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers (customer_name, customer_email, customer_phone, customer_status, customer_properties) VALUES (?, ?, ?, ?, ?)
`

type CreateCustomerParams struct {
	CustomerName       string         `json:"customer_name"`
	CustomerEmail      sql.NullString `json:"customer_email"`
	CustomerPhone      string         `json:"customer_phone"`
	CustomerStatus     int64          `json:"customer_status"`
	CustomerProperties sql.NullString `json:"customer_properties"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer,
		arg.CustomerName,
		arg.CustomerEmail,
		arg.CustomerPhone,
		arg.CustomerStatus,
		arg.CustomerProperties,
	)
	return err
}

const deleteCustomerByID = `-- name: DeleteCustomerByID :exec
UPDATE customers
SET deleted_at = ?,
    customer_status = 2,
    updated_at = ?
WHERE customer_id = ?
`

type DeleteCustomerByIDParams struct {
	DeletedAt  sql.NullInt64 `json:"deleted_at"`
	UpdatedAt  sql.NullInt64 `json:"updated_at"`
	CustomerID int64         `json:"customer_id"`
}

func (q *Queries) DeleteCustomerByID(ctx context.Context, arg DeleteCustomerByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerByID, arg.DeletedAt, arg.UpdatedAt, arg.CustomerID)
	return err
}

const forceDeleteCustomerByID = `-- name: ForceDeleteCustomerByID :exec
DELETE FROM customers
WHERE customer_id = ? OR customer_phone = ?
`

type ForceDeleteCustomerByIDParams struct {
	CustomerID    int64  `json:"customer_id"`
	CustomerPhone string `json:"customer_phone"`
}

func (q *Queries) ForceDeleteCustomerByID(ctx context.Context, arg ForceDeleteCustomerByIDParams) error {
	_, err := q.db.ExecContext(ctx, forceDeleteCustomerByID, arg.CustomerID, arg.CustomerPhone)
	return err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT customer_id, customer_name, customer_email, customer_phone, customer_status, customer_total_orders, customer_properties
FROM customers
WHERE customer_id = ?
`

type GetCustomerByIDRow struct {
	CustomerID          int64          `json:"customer_id"`
	CustomerName        string         `json:"customer_name"`
	CustomerEmail       sql.NullString `json:"customer_email"`
	CustomerPhone       string         `json:"customer_phone"`
	CustomerStatus      int64          `json:"customer_status"`
	CustomerTotalOrders int64          `json:"customer_total_orders"`
	CustomerProperties  sql.NullString `json:"customer_properties"`
}

func (q *Queries) GetCustomerByID(ctx context.Context, customerID int64) (GetCustomerByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, customerID)
	var i GetCustomerByIDRow
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.CustomerStatus,
		&i.CustomerTotalOrders,
		&i.CustomerProperties,
	)
	return i, err
}

const getCustomerByPhone = `-- name: GetCustomerByPhone :one
SELECT customer_id, customer_name, customer_email, customer_phone, customer_status, customer_total_orders, customer_properties
FROM customers
WHERE customer_phone = ?
`

type GetCustomerByPhoneRow struct {
	CustomerID          int64          `json:"customer_id"`
	CustomerName        string         `json:"customer_name"`
	CustomerEmail       sql.NullString `json:"customer_email"`
	CustomerPhone       string         `json:"customer_phone"`
	CustomerStatus      int64          `json:"customer_status"`
	CustomerTotalOrders int64          `json:"customer_total_orders"`
	CustomerProperties  sql.NullString `json:"customer_properties"`
}

func (q *Queries) GetCustomerByPhone(ctx context.Context, customerPhone string) (GetCustomerByPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByPhone, customerPhone)
	var i GetCustomerByPhoneRow
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.CustomerStatus,
		&i.CustomerTotalOrders,
		&i.CustomerProperties,
	)
	return i, err
}

const getListCustomers = `-- name: GetListCustomers :many
SELECT customer_id, customer_name, customer_email, customer_phone, customer_status, customer_total_orders
FROM customers
WHERE customer_name LIKE ? OR customer_phone = ? OR customer_status = ? OR (created_at >= ? AND created_at <= ?) OR (deleted_at >= ? AND deleted_at <= ?)
ORDER BY ?
LIMIT ? OFFSET ?
`

type GetListCustomersParams struct {
	CustomerName   string        `json:"customer_name"`
	CustomerPhone  string        `json:"customer_phone"`
	CustomerStatus int64         `json:"customer_status"`
	CreatedAt      sql.NullInt64 `json:"created_at"`
	CreatedAt_2    sql.NullInt64 `json:"created_at_2"`
	DeletedAt      sql.NullInt64 `json:"deleted_at"`
	DeletedAt_2    sql.NullInt64 `json:"deleted_at_2"`
	Limit          int64         `json:"limit"`
	Offset         int64         `json:"offset"`
}

type GetListCustomersRow struct {
	CustomerID          int64          `json:"customer_id"`
	CustomerName        string         `json:"customer_name"`
	CustomerEmail       sql.NullString `json:"customer_email"`
	CustomerPhone       string         `json:"customer_phone"`
	CustomerStatus      int64          `json:"customer_status"`
	CustomerTotalOrders int64          `json:"customer_total_orders"`
}

func (q *Queries) GetListCustomers(ctx context.Context, arg GetListCustomersParams) ([]GetListCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCustomers,
		arg.CustomerName,
		arg.CustomerPhone,
		arg.CustomerStatus,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.DeletedAt,
		arg.DeletedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCustomersRow
	for rows.Next() {
		var i GetListCustomersRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.CustomerStatus,
			&i.CustomerTotalOrders,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreCustomerByID = `-- name: RestoreCustomerByID :exec
UPDATE customers
SET deleted_at = 0,
    customer_status = 0,
    updated_at = ?
WHERE customer_id = ?
`

type RestoreCustomerByIDParams struct {
	UpdatedAt  sql.NullInt64 `json:"updated_at"`
	CustomerID int64         `json:"customer_id"`
}

func (q *Queries) RestoreCustomerByID(ctx context.Context, arg RestoreCustomerByIDParams) error {
	_, err := q.db.ExecContext(ctx, restoreCustomerByID, arg.UpdatedAt, arg.CustomerID)
	return err
}

const updateCustomerByID = `-- name: UpdateCustomerByID :exec
UPDATE customers
SET customer_name = ?,
    customer_email = ?,
    customer_phone = ?,
    customer_status = ?,
    customer_properties = ?,
    updated_at = ?
WHERE customer_id = ?
`

type UpdateCustomerByIDParams struct {
	CustomerName       string         `json:"customer_name"`
	CustomerEmail      sql.NullString `json:"customer_email"`
	CustomerPhone      string         `json:"customer_phone"`
	CustomerStatus     int64          `json:"customer_status"`
	CustomerProperties sql.NullString `json:"customer_properties"`
	UpdatedAt          sql.NullInt64  `json:"updated_at"`
	CustomerID         int64          `json:"customer_id"`
}

func (q *Queries) UpdateCustomerByID(ctx context.Context, arg UpdateCustomerByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerByID,
		arg.CustomerName,
		arg.CustomerEmail,
		arg.CustomerPhone,
		arg.CustomerStatus,
		arg.CustomerProperties,
		arg.UpdatedAt,
		arg.CustomerID,
	)
	return err
}

const updateCustomerStatusByID = `-- name: UpdateCustomerStatusByID :exec
UPDATE customers
SET customer_status = ?,
    updated_at = ?
WHERE customer_id = ?
`

type UpdateCustomerStatusByIDParams struct {
	CustomerStatus int64         `json:"customer_status"`
	UpdatedAt      sql.NullInt64 `json:"updated_at"`
	CustomerID     int64         `json:"customer_id"`
}

func (q *Queries) UpdateCustomerStatusByID(ctx context.Context, arg UpdateCustomerStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerStatusByID, arg.CustomerStatus, arg.UpdatedAt, arg.CustomerID)
	return err
}

const updateCustomerTotalOrdersByID = `-- name: UpdateCustomerTotalOrdersByID :exec
UPDATE customers
SET customer_total_orders = ?,
    updated_at = ?
WHERE customer_id = ?
`

type UpdateCustomerTotalOrdersByIDParams struct {
	CustomerTotalOrders int64         `json:"customer_total_orders"`
	UpdatedAt           sql.NullInt64 `json:"updated_at"`
	CustomerID          int64         `json:"customer_id"`
}

func (q *Queries) UpdateCustomerTotalOrdersByID(ctx context.Context, arg UpdateCustomerTotalOrdersByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerTotalOrdersByID, arg.CustomerTotalOrders, arg.UpdatedAt, arg.CustomerID)
	return err
}
